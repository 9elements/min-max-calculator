// https://github.com/zachleat/details-utils/
class DetailsUtilsForceState{ constructor(t, e = {}) { this.options = Object.assign({ closeClickOutside: !1, forceStateClose: !1, forceStateOpen: !1, closeEsc: !1, forceStateRestore: !0 }, e), this.detail = t, this.summary = t.querySelector(":scope > summary"), this._previousStates = {} } getMatchMedia(t, e) { if (!!t) { if (e && e === !0) return { matches: !0 }; if (e && "matchMedia" in window) return window.matchMedia(e) } } init() { let t = this.getMatchMedia(this.detail, this.options.forceStateOpen), e = this.getMatchMedia(this.detail, this.options.forceStateClose); t && t.matches && e && e.matches ? this.setState(!this.detail.open) : (t && t.matches && this.setState(!0), e && e.matches && this.setState(!1)), this.addListener(t, "for-open"), this.addListener(e, "for-close") } addListener(t, e) { !t || !("addListener" in t) || t.addListener(i => { i.matches ? (this._previousStates[ e ] = this.detail.open, this.detail.open !== (e === "for-open") && this.setState(e === "for-open")) : this.options.forceStateRestore && this._previousStates[ e ] !== void 0 && this.detail.open !== this._previousStates[ e ] && this.setState(this._previousStates[ e ]) }) } toggle() { let t = new MouseEvent("click", { view: window, bubbles: !0, cancelable: !0 }); this.summary.dispatchEvent(t) } triggerClickToClose() { this.summary && this.options.closeClickOutside && this.toggle() } setState(t) { t ? this.detail.setAttribute("open", "open") : this.detail.removeAttribute("open") } } class DetailsUtilsAnimateDetails{ constructor(t) { this.duration = { open: 200, close: 150 }, this.detail = t, this.summary = this.detail.querySelector(":scope > summary"); let e = this.detail.getAttribute("data-du-animate-target"); if (e && (this.content = this.detail.closest(e)), this.content || (this.content = this.summary.nextElementSibling), !this.content) throw new Error("For now <details-utils> requires a child element for animation."); this.summary.addEventListener("click", this.onclick.bind(this)) } parseAnimationFrames(t, ...e) { let i = []; for (let s of e) { let o = {}; o[ t ] = s, i.push(o) } return i } getKeyframes(t) { let e = this.parseAnimationFrames("maxHeight", "0px", `${this.getContentHeight()}px`); return t ? e : e.filter(() => !0).reverse() } getContentHeight() { if (this.contentHeight) return this.contentHeight; if (this.detail.open) return this.contentHeight = this.content.offsetHeight, this.contentHeight } animate(t, e) { this.isPending = !0; let i = this.getKeyframes(t); this.animation = this.content.animate(i, { duration: e, easing: "ease-out" }), this.detail.classList.add("details-animating"), this.animation.finished.catch(s => { }).finally(() => { this.isPending = !1, this.detail.classList.remove("details-animating") }), t || this.animation.finished.catch(s => { }).finally(() => { this.detail.removeAttribute("open") }) } open() { this.contentHeight ? this.animate(!0, this.duration.open) : requestAnimationFrame(() => this.animate(!0, this.duration.open)) } close() { this.animate(!1, this.duration.close) } useAnimation() { return "matchMedia" in window && !window.matchMedia("(prefers-reduced-motion: reduce)").matches } onclick(t) { t.target.closest("a[href]") || !this.useAnimation() || (this.isPending ? this.animation && this.animation.cancel() : this.detail.open ? (t.preventDefault(), this.close()) : this.open()) } } class DetailsUtils extends HTMLElement{ constructor() { super(), this.attrs = { animate: "animate", closeEsc: "close-esc", closeClickOutside: "close-click-outside", forceStateClose: "force-close", forceStateOpen: "force-open", forceStateRestore: "force-restore", toggleDocumentClass: "toggle-document-class", closeClickOutsideButton: "data-du-close-click" }, this.options = {}, this._connect() } getAttributeValue(t) { let e = this.getAttribute(t); return e === void 0 || e === "" ? !0 : e || !1 } connectedCallback() { this._connect() } _connect() { if (this.children.length) { this._init(); return } this._observer = new MutationObserver(this._init.bind(this)), this._observer.observe(this, { childList: !0 }) } _init() { if (this.initialized) return; this.initialized = !0, this.options.closeClickOutside = this.getAttributeValue(this.attrs.closeClickOutside), this.options.closeEsc = this.getAttributeValue(this.attrs.closeEsc), this.options.forceStateClose = this.getAttributeValue(this.attrs.forceStateClose), this.options.forceStateOpen = this.getAttributeValue(this.attrs.forceStateOpen), this.options.forceStateRestore = this.getAttributeValue(this.attrs.forceStateRestore); let t = Array.from(this.querySelectorAll(":scope details")); for (let e of t) new DetailsUtilsForceState(e, this.options).init(), this.hasAttribute(this.attrs.animate) && new DetailsUtilsAnimateDetails(e); this.bindCloseOnEsc(t), this.bindClickoutToClose(t), this.toggleDocumentClassName = this.getAttribute(this.attrs.toggleDocumentClass), this.toggleDocumentClassName && this.bindToggleDocumentClass(t) } bindCloseOnEsc(t) { !this.options.closeEsc || document.documentElement.addEventListener("keydown", e => { if (e.keyCode === 27) { for (let i of t) if (i.open) { let s = new DetailsUtilsForceState(i, this.options), o = s.getMatchMedia(i, this.options.closeEsc); (!o || o && o.matches) && s.toggle() } } }, !1) } isChildOfParent(t, e) { for (; t && t.parentNode;){ if (t.parentNode === e) return !0; t = t.parentNode } return !1 } onClickoutToClose(t, e) { let i = new DetailsUtilsForceState(t, this.options), s = i.getMatchMedia(t, this.options.closeClickOutside); if (s && !s.matches) return; (e.target.hasAttribute(this.attrs.closeClickOutsideButton) || !this.isChildOfParent(e.target, t)) && t.open && i.triggerClickToClose(t) } bindClickoutToClose(t) { document.documentElement.addEventListener("mousedown", e => { for (let i of t) this.onClickoutToClose(i, e) }, !1), this.addEventListener("keypress", e => { if (e.which === 13 || e.which === 32) for (let i of t) this.onClickoutToClose(i, e) }, !1) } bindToggleDocumentClass(t) { for (let e of t) e.addEventListener("toggle", i => { document.documentElement.classList.toggle(this.toggleDocumentClassName, i.target.open) }) } } typeof window < "u" && "customElements" in window && window.customElements.define("details-utils", DetailsUtils)